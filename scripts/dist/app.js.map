{"version":3,"sources":["../lib/app.js"],"names":[],"mappings":"AAAA;;;AAEE,EAAE,MAAF,EAAU,EAAV,CAAa,QAAb,EAAuB,YAAY;AACjC,QAAM,cAAN,GADiC;AAEjC,MAAM,QAAQ,EAAE,oBAAF,EAAwB,GAAxB,EAAR;;;AAF2B,MAK3B,iBAAiB,IAAI,cAAJ,CAAmB,EAAnB,EAAuB,EAAE,MAAM,KAAN,EAAzB,CAAjB,CAL2B;AAMjC,MAAM,eAAe,IAAI,QAAJ,CAAa,EAAE,YAAY,cAAZ,EAAf,CAAf,CAN2B;CAAZ,CAAvB;;;AAUF,SAAS,YAAT,CAAuB,UAAvB,EAAmC,QAAnC,EAA6C,OAA7C,EAAsD;AACpD,UAAQ,GAAR,0BAAmC,SAAS,YAAT,CAAnC,CADoD;AAEpD,IAAE,SAAF,EAAa,IAAb,gDAFoD;CAAtD;;;;AAOA,IAAI,WAAW,SAAS,IAAT,CAAc,MAAd,CAAqB;;CAArB,CAAX;;AAIJ,IAAI,WAAW,SAAS,IAAT,CAAc,MAAd,CAAqB;;CAArB,CAAX;;AAIJ,IAAI,WAAW,SAAS,IAAT,CAAc,MAAd,CAAqB;;AAElC,MAAG,SAAH;AACA,oCAAc;AACZ,SAAK,MAAL,GADY;GAHoB;AAMlC,4BAAU;;;AACR,SAAK,UAAL,CAAgB,KAAhB,CAAsB,EAAE,OAAO,YAAP,EAAxB,EAA+C,IAA/C,CAAqD,YAAM;AACzD,UAAG,MAAK,UAAL,CAAgB,MAAhB,KAA2B,CAA3B,EAA8B,MAAK,GAAL,CAAS,IAAT,iDAAjC,KACK;;AACH,cAAI,IAAI,CAAJ;AACJ,gBAAK,GAAL,CAAS,KAAT;AACA,gBAAK,UAAL,CAAgB,OAAhB,CAAyB,gBAAQ;AAC/B,gBAAM,OAAO,KAAK,UAAL,CAAgB,QAAhB,CADkB;AAE/B,kBAAK,GAAL,CAAS,MAAT,eAA4B,mBAAc,eAA1C,EAF+B;AAG/B,gBAH+B;WAAR,CAAzB;aAHG;OADL;KADmD,CAArD,CADQ;GANwB;CAArB,CAAX;;AAuBJ,IAAI,YAAY,SAAS,KAAT,CAAe,MAAf,CAAsB;;AAEpC,YAAU;AACR,cAAU,IAAV;AACA,gBAAY,IAAZ;AACA,gBAAY,IAAZ;AACA,iBAAa,IAAb;AACA,WAAO;AACL,gBAAU,IAAV;AACA,gBAAU,IAAV;AACA,eAAS,IAAT;KAHF;GALF;CAFc,CAAZ;;AAeJ,IAAI,iBAAiB,SAAS,UAAT,CAAoB,MAApB,CAA2B;;AAE9C,SAAO,SAAP;AACA,kCAAY,QAAQ,SAAS;AAC3B,SAAK,GAAL,qCAA2C,QAAQ,IAAR,WAA3C,CAD2B;GAHiB;CAA3B,CAAjB","file":"app.js","sourcesContent":["'use strict'\r\n  //jQuery and other events\r\n  $('form').on('submit', function () {\r\n    event.preventDefault();\r\n    const query = $('input[type=search]').val();\r\n\r\n    //call Backbone methods\r\n    const userCollection = new GistCollection([], { user: query });\r\n    const userGistList = new ListView({ collection: userCollection });\r\n  });\r\n\r\n//helpers and handlers\r\nfunction errorHandler (collection, response, options) {\r\n  console.log(`There was an error: ${response.responseText}`);\r\n  $('#output').html(`<h3>That user doesn't appear to exist</h3>`);\r\n};\r\n\r\n//backbone logic for interacting with GitHub API\r\n\r\nlet UserView = Backbone.View.extend({\r\n  //view logic for showing user information (profile pic, name, etc)\r\n});\r\n\r\nlet GistView = Backbone.View.extend({\r\n  //view logic for individual gists\r\n});\r\n\r\nlet ListView = Backbone.View.extend({\r\n  //view logic for entire list of public gists\r\n  el:'#output',\r\n  initialize () {\r\n    this.render()\r\n  },\r\n  render () {\r\n    this.collection.fetch({ error: errorHandler }).then( () => {\r\n      if(this.collection.length === 0) this.$el.html(`<h3>Sorry, no gists found for that user</h3>`);\r\n      else {\r\n        let i = 1;\r\n        this.$el.empty();\r\n        this.collection.forEach( item => {\r\n          const link = item.attributes.html_url;\r\n          this.$el.append(`<a href=\"${link}\">gist ${i}</a><br/>`);\r\n          i++;\r\n        });\r\n      }\r\n\r\n    });\r\n  }\r\n});\r\n\r\nlet GistModel = Backbone.Model.extend({\r\n  //model based on single public gist Object from GitHub API\r\n  defaults: {\r\n    html_url: null,\r\n    created_at: null,\r\n    updated_at: null,\r\n    description: null,\r\n    files: {\r\n      filename: null,\r\n      language: null,\r\n      raw_url: null\r\n    }\r\n  }\r\n});\r\n\r\nlet GistCollection = Backbone.Collection.extend({\r\n  //collection of all gists pulled from GitHub API\r\n  model: GistModel,\r\n  initialize (models, options) {\r\n    this.url = `https://api.github.com/users/${options.user}/gists`;\r\n  }\r\n});\r\n\r\n// userCollection and userGistList built on form submission (see jQuery event handlers)\r\n"]}